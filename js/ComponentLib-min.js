const Component={new:function(e,t){let n=class extends this.element{};return n.component=t,n.observe=t.observe??[],customElements.define(e,n),n},element:class extends HTMLElement{static instance(e){return new this(e,this.component,this.observe)}constructor(e,t,n){super(),this.component=t,this.observe=n,Object.keys(e).forEach((t=>this[t]=e[t])),this.innerHTML=this.component.render.bind(this)(),this.component.shadow&&this.attachShadow({mode:"open"}),Object.entries(this.component.events).forEach((([e,t])=>{["onCreate","onMove","onDestroy","onAttributeChange"].includes(e)||this.addEventListener(e,(e=>t.bind(this)(e)))}))}connectedCallback(){Object.entries(this.component.attributes).forEach((([e,t])=>{this.setAttribute(e,t)})),this.component.events.onCreate.bind(this)()}adoptedCallback(){this.component.events.onMove.bind(this)()}disconnectedCallback(){this.component.events.onDestroy.bind(this)()}static get observedAttributes(){return this.observe}attributeChangedCallback(e,t,n){this.component.events.onAttributeChange.bind(this)(e,n,t)}}};